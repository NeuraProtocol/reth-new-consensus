use alloy::{
    primitives::U256, providers::{Provider, ProviderBuilder}, signers::local::PrivateKeySigner, sol
};
use reth_revm::primitives::b256;

sol! {
    #[sol(rpc, bytecode = "0x6080604052348015600e575f5ffd5b506107548061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c8063116f45ed14610043578063e5ad5c2a1461005f578063f905c15a1461007b575b5f5ffd5b61005d6004803603810190610058919061027a565b610099565b005b61007960048036038101906100749190610467565b610166565b005b610083610203565b60405161009091906104c6565b60405180910390f35b5f5f90505b82829050811015610161575f8383838181106100bd576100bc6104df565b5b9050602002013590505f5f546040516020016100d991906104c6565b604051602081830303815290604052826040516020016100f991906104c6565b6040516020818303038152906040526040516020016101199291906105f6565b60405160208183030381529060405290508051602082015ff08061013b575f5ffd5b505f5f81548092919061014d906106a0565b91905055505050808060010191505061009e565b505050565b5f5f90505b81518110156101ff57818181518110610187576101866104df565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166040516101b19061070a565b5f604051808303815f865af19150503d805f81146101ea576040519150601f19603f3d011682016040523d82523d5f602084013e6101ef565b606091505b505050808060010191505061016b565b5050565b5f5481565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261023a57610239610219565b5b8235905067ffffffffffffffff8111156102575761025661021d565b5b60208301915083602082028301111561027357610272610221565b5b9250929050565b5f5f602083850312156102905761028f610211565b5b5f83013567ffffffffffffffff8111156102ad576102ac610215565b5b6102b985828601610225565b92509250509250929050565b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61030b826102c5565b810181811067ffffffffffffffff8211171561032a576103296102d5565b5b80604052505050565b5f61033c610208565b90506103488282610302565b919050565b5f67ffffffffffffffff821115610367576103666102d5565b5b602082029050602081019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103a182610378565b9050919050565b6103b181610397565b81146103bb575f5ffd5b50565b5f813590506103cc816103a8565b92915050565b5f6103e46103df8461034d565b610333565b9050808382526020820190506020840283018581111561040757610406610221565b5b835b81811015610430578061041c88826103be565b845260208401935050602081019050610409565b5050509392505050565b5f82601f83011261044e5761044d610219565b5b813561045e8482602086016103d2565b91505092915050565b5f6020828403121561047c5761047b610211565b5b5f82013567ffffffffffffffff81111561049957610498610215565b5b6104a58482850161043a565b91505092915050565b5f819050919050565b6104c0816104ae565b82525050565b5f6020820190506104d95f8301846104b7565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f7f00000000000000000000000000000000000000000000000000000000000000815250565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61055e82610532565b610568818561053c565b9350610578818560208601610546565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5200000000000000000000000000000000000000000000000000000000000000815250565b7ff300000000000000000000000000000000000000000000000000000000000000815250565b5f6106008261050c565b6001820191506106108285610554565b915061061b82610584565b60018201915061062a826105aa565b6001820191506106398261050c565b6001820191506106498284610554565b915061065482610584565b600182019150610663826105d0565b6001820191508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6106aa826104ae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106dc576106db610673565b5b600182019050919050565b50565b5f6106f55f8361053c565b9150610700826106e7565b5f82019050919050565b5f610714826106ea565b915081905091905056fea26469706673582212204679afcaed9b78e8d1e867d3e6b9e9cbcf7bfeaecd7fa06b9a057f77b561436564736f6c634300081d0033")]
    contract Tester {
        uint256 public deployed;

        function deployContracts(uint256[] calldata sizes) public;

        function call(address[] memory accounts) public;
    }
}

#[tokio::main]
pub async fn main() -> eyre::Result<()> {
    let signer = PrivateKeySigner::from_bytes(&b256!(
        "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
    ))?;
    let provider = ProviderBuilder::new().wallet(signer).connect("http://localhost:8545").await?;

    let tester = Tester::deploy(&provider).await?;

    for _ in 0..1000 {
        let sizes =
            (0..10).map(|_| rand::random::<U256>() % U256::from(20_000)).collect::<Vec<_>>();
        let receipt = tester.deployContracts(sizes).send().await.unwrap().get_receipt().await?;
        assert!(receipt.status());
    }

    let nonce = provider.get_transaction_count(*tester.address()).await?;

    let accounts = (0..10000)
        .map(|_| tester.address().create(rand::random::<u64>() % nonce))
        .collect::<Vec<_>>();

    assert!(tester.call(accounts).send().await?.get_receipt().await?.status());

    Ok(())
}
